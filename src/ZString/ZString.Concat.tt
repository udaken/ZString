<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="T4Common.t4" once="true" #>
using System.Runtime.CompilerServices;

namespace Cysharp.Text
{
    public static partial class ZString
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static void ConcatInternal<T>(ref Utf16ValueStringBuilder sb, T arg)
        {
            if (typeof(T) == typeof(string))
            {
                if (arg != null)
                {
                    sb.Append(Unsafe.As<string>(arg));
                }
            }
#if false
<# foreach(var t in spanFormattables) { #>
            else if (typeof(T) == typeof(<#= t #>))
            {
                sb.Append(arg);
            }
<# } #>
#endif
            else
            {
                sb.Append(arg);
            }
        }
<# for(var i = 1; i <= TypeParamMax; i++) { #>
        /// <summary>Concatenates the string representation of some specified objects.</summary>
        public static string Concat<<#= CreateTypeArgument(i) #>>(<#= CreateParameters(i) #>)
        {
            var sb = new Utf16ValueStringBuilder(true);
            try
            {
<# for(var j = 0; j < i; j++) { #>
                ConcatInternal(ref sb, arg<#= j + 1 #>);
<# } #>
                return sb.ToString();
            }
            finally
            {
                sb.Dispose();
            }
        }

<# } #>
    }
}